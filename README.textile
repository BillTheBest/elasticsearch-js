h1. ElasticSearch Javascript Client and Proxy Server

There are two main parts in this project:
# implementation of Javascript client for Elastic Search supporting jQuery and NodeJS clients (basic jQuery support is already implemented).
# NodeJS based proxy server for Elastic Search.

h2. Javascript client

The following is a simple example:

<pre>
<code>
    <html>
    <head>
        <title>ElasticSearch-js: simple example</title>
        <script type="text/javascript" src="libs/jquery-1.4.2.min.js"></script>
        <script type="text/javascript" src="libs/json2.js"></script>
        <script type="text/javascript" src="../js/elasticsearch.js"></script>
        <script type="text/javascript" src="../js/elasticsearch-jquery.js"></script>
    </head>
    <body>

        <form>
            Show
            <input value="cluster state" id="state" type="button">,
            <input value="cluster health" id="health" type="button">,
            <input value="cluster nodes info" id="nodes_info" type="button">
        </form>

        <div id="output" style="white-space: pre; font-family: monospace;"></div>

        <script type="text/javascript">

            var displayJSON = function(data, xhr){ $("#output").empty().append(JSON.stringify(data, null, '  ')); };

            var es = new ElasticSearch({callback: displayJSON}); // by default connecting to localhost:9200

            $("#state").click(function(){ es.clusterState() });
            $("#health").click(function(){ es.clusterHealth({level: "shards"}) });
            $("#nodes_info").click(function(){ es.clusterNodesInfo() });

        </script>
    </body>
    </html>
</code>
</pre>

See source code of "simple.js":http://github.com/lukas-vlcek/elasticsearch-js/blob/master/demo/simple.html.

For more complex example check "demo.js":http://github.com/lukas-vlcek/elasticsearch-js/blob/master/demo/demo.js or open "demo.html":http://github.com/lukas-vlcek/elasticsearch-js/blob/master/demo/demo.html in your web browser.

h2. Proxy server

The proxy server is written in NodeJS. See "node":http://github.com/lukas-vlcek/elasticsearch-js/tree/master/js/node/ folder for sources (documentation can be found in source files).

Basically, the proxy server can do the following for you:
* It can restrict access to REST API (defaults to _safe_ operations only).
* You can provide handlers to modify client request (e.g. you can ensure that @size@ is not too big) and Elastic Search response (e.g. you can remove sensitive data).
* It can round-robin client requests among active http enabled nodes (it periodically refreshes list of active nodes), thus, it can provide a single URL for clients to communicate with Elastic Search cluster.
